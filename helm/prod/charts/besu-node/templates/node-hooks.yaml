

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "besu-node.fullname" . }}-hooks-sa
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"  

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "besu-node.fullname" . }}-hooks-role
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"    
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["create", "get", "list", "update", "delete" ]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "besu-node.fullname" . }}-hooks-rb
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"    
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "besu-node.fullname" . }}-hooks-role
subjects:
- kind: ServiceAccount
  name: {{ include "besu-node.fullname" . }}-hooks-sa
  namespace:  {{ .Release.Namespace }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "besu-node.fullname" . }}-pre-install-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "hook-succeeded"
  labels:
    aadpodidbinding: "{{ .Values.azure.identityName }}"   
spec:
  backoffLimit: 1
  completions: 1
  template:
    metadata:
      labels:
        aadpodidbinding: "{{ .Values.azure.identityName }}"  
    spec:
      serviceAccountName: {{ include "besu-node.fullname" . }}-hooks-sa
      restartPolicy: "OnFailure"
      containers:
        - name: {{ template "besu-node.fullname" . }}-besu-pre-start-hook
          image: {{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}
          imagePullPolicy: {{ .Values.image.besu.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |

              echo "{{ template "besu-node.fullname" . }} Pre Install hook ..."

              function safeWriteSecret {
                key=$1
                fpath=$2
                az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  az keyvault secret set --vault-name {{ .Values.azure.keyvaultName }} --name $key --file $fpath --encoding utf-8
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key | jq -r '.value' > $fpath
                fi
              }

              az login --identity --debug

              echo "besu nodekey generation ..."
              cd /tmp
              /opt/besu/bin/besu public-key export --to=/tmp/public.key
              # the public key has an extra '0x' in front which isn't accepted by the enode format, this strips that out
              sed 's/^0x//' /tmp/public${j}.key > /tmp/enode

              echo "Creating keys in keyvault for {{ template "besu-node.fullname" . }} ..."
              safeWriteSecret {{ template "besu-node.fullname" . }}-nodekey /opt/besu/key
              safeWriteSecret {{ template "besu-node.fullname" . }}-nodekeypub /tmp/public.key
              safeWriteSecret {{ template "besu-node.fullname" . }}-enode /tmp/enode
              
            {{- if .Values.nodeFlags.privacy }}       

            {{- if .Values.privacy.password }} 
              echo $'{{ .Values.privacy.password  }}\n{{ .Values.privacy.password }}\n' > /tmp/password.txt
            {{- else }} 
              echo $'\n\n' > /tmp/password.txt
            {{- end }}  

              /opt/orion/bin/orion -g nodekey < /tmp/password.txt

              echo "Creating orion keys in keyvault for {{ template "besu-node.fullname" . }} ..."
              safeWriteSecret {{ template "besu-node.fullname" . }}-tmkey /tmp/nodekey.key
              safeWriteSecret {{ template "besu-node.fullname" . }}-tmkeypub /tmp/nodekey.pub

              # remove the second passowrd so it can be used as a password
              echo -ne $(sed -n '1p' /tmp/password.txt )> /tmp/password
              safeWriteSecret {{ template "besu-node.fullname" . }}-tmpassword /tmp/password

            {{- end }}  

              echo "Completed"







